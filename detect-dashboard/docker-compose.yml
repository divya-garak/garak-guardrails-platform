version: '3.8'

services:
  garak-dashboard:
    build:
      context: ..
      dockerfile: dashboard/Dockerfile.production
    ports:
      - "8080:8080"
    environment:
      # Flask configuration
      - FLASK_ENV=development
      - DEBUG=true
      - PORT=8080
      
      # Firebase configuration (load from .env file)
      - FIREBASE_API_KEY=${FIREBASE_API_KEY}
      - FIREBASE_AUTH_DOMAIN=${FIREBASE_AUTH_DOMAIN}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET}
      - FIREBASE_MESSAGING_SENDER_ID=${FIREBASE_MESSAGING_SENDER_ID}
      - FIREBASE_APP_ID=${FIREBASE_APP_ID}
      
      # Authentication settings
      - DISABLE_AUTH=${DISABLE_AUTH:-false}
      
      # Application settings
      - SECRET_KEY=${SECRET_KEY:-garak-dashboard-secret-key-local}
      
      # Directory paths
      - DATA_DIR=/app/data
      - REPORT_DIR=/app/reports
      - DOCKER_ENV=true
      
      # GCP settings (for local testing with service account)
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-}
      
    volumes:
      # Persistent storage for development
      - ./data:/app/data
      - ./reports:/app/reports
      
      # Mount Firebase service account if available
      - ./firebase-sa.json:/app/firebase-sa.json:ro
      
      # Mount GCP credentials if available (for local testing)
      - ${GOOGLE_APPLICATION_CREDENTIALS:-/dev/null}:/app/gcp-credentials.json:ro
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    restart: unless-stopped
    
    # Add labels for better container management
    labels:
      - "com.garak.service=dashboard"
      - "com.garak.environment=development"

  # Optional: Redis for session storage (if needed later)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - redis  # Use with: docker-compose --profile redis up

volumes:
  redis_data:

networks:
  default:
    name: garak-network